#pragma kernel RenderFriends

#include "Friend.hlsl"

RWTexture2D<float4> renderTexture;

int screenWidth;
int screenHeight;

int frameCount;

bool tiny;

int friendCount;
RWStructuredBuffer<Friend> friendData;
StructuredBuffer<float3> colorPalette;

float luminance(float4 color)
{
    return (color.r + color.g + color.b) * 0.333333 * color.a;
}

[numthreads(64, 1, 1)]
void RenderFriends(uint3 id: SV_DispatchThreadID)
{
    if ((int) id.x >= friendCount)
    {
        return;
    }
    
    Friend this = friendData[id.x];
    
    int2 pos = int2((int) round(this.position.x), (int) round(this.position.y));
    
    // Draw black outline around friend, avoiding overwriting any friends that have been rendered already
    int range = tiny ? 1 : 2;
    for (int ox = -range; ox <= range; ox++)
    {
        for (int oy = -range; oy <= range; oy++)
        {
            int2 opos = pos + int2(ox, oy);
            if (opos.x < 0 || opos.y < 0 || opos.x >= screenWidth || opos.y >= screenHeight)
            {
                continue;
            }
            
            if (luminance(renderTexture[opos]) > 0.0)
            {
                continue;
            }
            
            if (!tiny || ox == 0 && oy == 0)
            {
                renderTexture[opos] = float4(colorPalette[FRIEND_GET_COLOR_IDX(this)], 1.0);
            }
            else
            {
                renderTexture[opos] = float4(0.0, 0.0, 0.0, 1.0);
            }
        }
    }
}
